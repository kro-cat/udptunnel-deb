#!/usr/bin/env sh

EXECNAME="$(basename "$0")"

log() {
  LVL="$(echo "$1" | tr '[:lower:]' '[:upper:]')"
  shift 1
  LOG="${EXECNAME}: ${LVL}: $@"
  case "$LVL" in
    WARN|ERROR) 1>&2 echo "${LOG}";;
    *) echo "${LOG}";;
  esac
}

usage() {
  cat - <<EOF
Usage: ${EXECNAME} CONFIG_FILE

Options:
  -h, --help            print this message
EOF
}

options=$(getopt -o h -l help -- $@)
eval set -- "${options}"

while :; do
  case "$1" in 
    -h|--help) usage && exit 0 ;;
    *) break ;;
  esac
done

shift 1
if [ "$#" -lt 1 ]
then
  log ERROR "config file is required"
  usage
  exit 2
fi
CONFIG_FILE="$(realpath "/etc/udptunnel/$(basename "$1").conf")"
[ ! -e "${CONFIG_FILE}" ] && log ERROR "${CONFIG_FILE} does not exist" && exit 1
CONFIG_FILE="$(cat "${CONFIG_FILE}")"
shift 1

getprop() {
  local SECTION PROPERTY
  SECTION="GLOBAL"
  PROPERTY="$1"
  echo "${CONFIG_FILE}" | \
    sed -nr -e '/^\['"${SECTION}"'\]/I,/^\[/{/^'"${PROPERTY}"'\s*=/I{s/^[^=]+=\s*//;p}}' | \
    sed 's/\s+$/\n/;$s/\n//'
}

# hooks
PRE_UP="$(getprop EXECSTARTPRE)"
POST_UP="$(getprop EXECSTARTPOST)"
POST_DOWN="$(getprop EXECSTOPPOST)"
execute_hooks() {
  for hook in "$@"
  do
    [ -n "${hook}" ] || continue
    log INFO "executing \`${hook}'"
    (eval "${hook}")
  done
}

# config
MODE="$(getprop MODE | tr '[:upper:]' '[:lower:]' )"
case "${MODE}" in
  server) # server (tcp->udp)
    UDPT_MODE="-s"
    [ -z "$(getprop LISTENADDRESS)" ] || log WARN "ListenAddress is ignored in server mode"
    LISTEN="$(getprop LISTENPORT)"
    CONNECT="$(getprop ENDPOINT)"
    ;;
  *) # client (udp->tcp)
    UDPT_MODE="-c"
    LISTEN="$(getprop LISTENADDRESS):$(getprop LISTENPORT)"
    CONNECT="$(getprop ENDPOINT)"
    ;;
  *) log ERROR "${MODE} is not a valid Mode"; exit 1 ;;
esac

UDPT_ARGS=""

ENABLERTP="$(getprop ENABLERTP)"
case "${ENABLERTP}" in
  [Yy]*|1) UDPT_ARGS="-r"
esac

LOGLEVEL="$(getprop LOGGINGLEVEL)"
case "${LOGLEVEL}" in
  1) UDPT_ARGS="${UDPT_ARGS} -v" ;;
  2) UDPT_ARGS="${UDPT_ARGS} -vv" ;;
  3) UDPT_ARGS="${UDPT_ARGS} -vvv" ;;
  *) log WARN "${LOGLEVEL} is not a valid Logging Level" ;;
esac


systemd-notify --status="Exec'ing pre-start hooks"
execute_hooks "${PRE_UP}"

systemd-notify --status="Starting udptunnel"
udptunnel "${UDPT_MODE}" "${LISTEN}" ${UDPT_ARGS} "${CONNECT}" &

systemd-notify --status="Exec'ing post-start hooks"
execute_hooks "${POST_UP}"
# log INFO "udptunnel started as $!"

systemd-notify --ready
wait
systemd-notify --stopping

systemd-notify --status="Exec'ing post-stop hooks"
execute_hooks "${POST_DOWN}"

